<?php	/*	KLYCHA WEB TECHNOLOGIES	*/	/*	***************************	*/	/*	Author: Sivkovich Maxim		*/	/*	***************************	*/	/*	Developed: from 2013		*/	/*	***************************	*/		// Settings class	require("BasicHelp.php");class projectsHelper extends BasicHelp{   		public $dbh;				public $table;		public $id;		public $item;				public function __construct($dbh)		{			parent::__construct($dbh);			$this->dbh = $dbh;		} 				public function getAvailableLangs(){			$query = "				SELECT L.name, L.alias, M.block, M.id 				FROM [pre]site_languages AS M 				LEFT JOIN [pre]languages AS L ON L.id = M.lang_id 				WHERE 1 $filter_and AND L.alias != '".DEF_LANG."'				ORDER BY M.id				LIMIT 1000			";			return $this->rs($query);		}		public function getResponsesList($params=[],$typeCount=0)		{			$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];				$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");			$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount) {				$query = "SELECT M.*,				          (SELECT `name` FROM osc_projects WHERE `id`=M.project_id LIMIT 1) as project,				          (SELECT `id` FROM osc_projects_responses_feedbacks WHERE `response_id`=M.id LIMIT 1) as is_feedbacked,				          (SELECT CONCAT(`org_name`,' (',`id`,')') FROM osc_users_organizations WHERE `id`=M.user_id LIMIT 1) as organization,				          (SELECT `image` FROM osc_users_organizations WHERE `id`=M.user_id LIMIT 1) as author_image						FROM [pre]projects_responses as M  						WHERE 1 $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										$result =  $this->rs($query);			} else {				$query = "SELECT COUNT(*) FROM [pre]projects_responses as M WHERE 1 $filter_and LIMIT 100000";				$result = $this->rs($query);				$result = $result[0]['COUNT(*)'];			}			return $result;					}		public function getResponse($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$result = $this->rs("				SELECT M.*,				(SELECT `id` FROM osc_projects_responses_feedbacks WHERE `response_id`=M.id LIMIT 1) as is_feedbacked,				(SELECT `org_name` FROM osc_users_organizations WHERE `id`=M.user_id LIMIT 1) as organization,				(SELECT `name` FROM osc_projects WHERE `id`=M.project_id LIMIT 1) as project				FROM osc_projects_responses as M				WHERE M.id=$id				ORDER BY M.created				LIMIT 1			");	        foreach($result as &$_r):	            $_r['files'] = $this->rs("SELECT * FROM osc_projects_responses_files WHERE `response_id`='".$_r['id']."'");	        endforeach;			return $result[0] ? $result[0] : [];		}		public function getResponseFeedbacks($params=[], $pid, $typeCount=0)		{			$sort_field		= "M.id";			$sort_vector	= " DESC "; 						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount) {				$query = "	                SELECT M.*,	                (SELECT `org_name` FROM osc_users_organizations WHERE `id`=M.user_id LIMIT 1) as organization	                FROM osc_projects_responses_feedbacks as M 	                WHERE M.response_id=$pid					ORDER BY $sort_field $sort_vector 					LIMIT $start,$limit";										$result =  $this->rs($query);			} else {				$query = "SELECT COUNT(*) FROM [pre]osc_projects_responses_feedbacks as M WHERE M.project_id=$pid";				$result = $this->rs($query);				$result = $result[0]['COUNT(*)'];			}			return $result;		}		public function getProject($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$result = $this->rs("				SELECT M.*,		        (SELECT COUNT(`id`) FROM [pre]projects_likes WHERE `problem_id`=M.id) as likes,		        (SELECT `ru_name_short` FROM [pre]projects_statuses WHERE `id`=M.status) as status_name,				(SELECT CONCAT(`org_name`, ' (',`id`,')') FROM [pre]users_organizations WHERE `id`=M.user_id) as organization				FROM osc_projects as M				WHERE M.id=$id				ORDER BY M.created				LIMIT 1			");	        foreach($result as &$_r):	            $_r['files'] = $this->rs("SELECT * FROM osc_projects_files WHERE `project_id`='".$_r['id']."'");	        endforeach;			return $result[0] ? $result[0] : [];		}							public function getProjectsList($params=[],$typeCount=0)		{			$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];				$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");			$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount) {				$query = "SELECT M.*,						(SELECT CONCAT(`org_name`, ' (',`id`,')') FROM [pre]users_organizations WHERE `id`=M.user_id) as organization,		                (SELECT `ru_name_short` FROM [pre]projects_statuses WHERE `id`=M.status) as status_name,		                (SELECT `ru_name` FROM [pre]projects_specializations WHERE `id`=M.spec) as spec,		                (SELECT COUNT(`id`) FROM [pre]projects_likes WHERE `project_id`=M.id) as likes,		                (SELECT COUNT(`id`) FROM [pre]projects_responses WHERE `project_id`=M.id) as responses						FROM [pre]projects as M  						WHERE 1 $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										$result =  $this->rs($query);			} else {				$query = "SELECT COUNT(*) FROM [pre]projects as M WHERE 1 $filter_and LIMIT 100000";				$result = $this->rs($query);				$result = $result[0]['COUNT(*)'];			}			return $result;		}		public function getAllProjects() {			$query = "SELECT M.* FROM [pre]projects as M";								$result =  $this->rs($query);			return $result;		}		public function getProjectResponses($params=[], $pid, $typeCount=0)		{			$sort_field		= "M.id";			$sort_vector	= " DESC "; 						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount) {				$query = "SELECT M.*,						(SELECT CONCAT(`org_name`, ' (',`id`,')') FROM [pre]users_organizations WHERE `id`=M.user_id) as organization,						(SELECT `id` FROM osc_projects_responses_feedbacks WHERE `response_id`=M.id LIMIT 1) as is_feedbacked,						(SELECT `image` FROM osc_users_organizations WHERE `id`=M.user_id LIMIT 1) as author_image 						FROM [pre]projects_responses as M						WHERE M.project_id=$pid  						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										$result =  $this->rs($query);			} else {				$query = "SELECT COUNT(*)						FROM [pre]projects_responses as M  						WHERE M.project_id=$pid  						";				$result = $this->rs($query);				$result = $result[0]['COUNT(*)'];			}			return $result;		}		public function getProjectResponse($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "			SELECT M.*            FROM [pre]projects_responses as M 			WHERE M.id='$id' 			LIMIT 1";			$resultMassive = $this->rs($query);			$result = ($resultMassive ? $resultMassive[0] : []);				        return $result;		}		public function getOrganizations()		{			$query = "SELECT `id`,`org_name` FROM [pre]users_organizations";			$resultMassive = $this->rs($query);			return $resultMassive;		}		public function getStatuses()		{			$query = "SELECT `id`,`ru_name_short` as name FROM [pre]projects_statuses";			$resultMassive = $this->rs($query);			return $resultMassive;		}    	public function __destruct(){}}